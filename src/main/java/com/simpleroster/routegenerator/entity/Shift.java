// entity/Shift.java (Represents an assigned shift in the generated schedule)
package com.simpleroster.routegenerator.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import java.time.LocalDate;
import java.time.LocalTime;

/**
 * Represents a single work shift assigned to an employee for a specific task
 * on a given date and time range.
 * This is the primary output entity generated by the ScheduleService.
 */
@Entity
@Table(name = "shifts")
// Using @Data is generally discouraged for JPA entities
@Getter
@Setter
@NoArgsConstructor
@EqualsAndHashCode(exclude = {"employee", "task"}) // Exclude relationships from default equals/hashCode
@ToString(exclude = {"employee", "task"}) // Exclude relationships from default toString
public class Shift {

    /** Unique identifier for the shift. */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /** The employee assigned to this shift. Null if the shift is unassigned (though currently not persisted). */
    @ManyToOne(fetch = FetchType.LAZY) // Fetch Employee only when needed (can improve performance)
    @JoinColumn(name = "employee_id") // Foreign key column in the shifts table
    private Employee employee;

    /** The task to be performed during this shift. */
    // Eager fetch might be okay if task details are always needed with shifts, but LAZY is generally safer.
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "task_id") // Foreign key column in the shifts table
    private Task task;

    /** The date on which the shift takes place. */
    @Column(name = "shift_date", nullable = false)
    private LocalDate shiftDate;

    /** The time the shift starts. */
    @Column(name = "start_time", nullable = false)
    private LocalTime startTime;

    /** The time the shift ends. */
    @Column(name = "end_time", nullable = false)
    private LocalTime endTime;

    // TODO: Consider adding other relevant fields like:
    // - breakDuration (e.g., in minutes)
    // - status (e.g., CONFIRMED, TENTATIVE, CANCELLED)
    // - notes (String)
}
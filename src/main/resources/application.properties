#Note: Proper CORS configuration might be needed in a separate configuration class for more control, especially in production.
# Using @CrossOrigin on the controller is simpler for development.

# Server Port
server.port=8090

# Database Configuration
                                        # Adjust DB name if needed
spring.datasource.url=jdbc:postgresql://localhost:5433/simpleroster-v2
# Replace it with your PostgreSQL username
spring.datasource.username=postgres
# Replace it with your PostgreSQL password
spring.datasource.password=12369874548524852
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
# Use 'update' for dev, 'validate' or 'none' for prod
spring.jpa.hibernate.ddl-auto=update
# Show SQL queries in logs (useful for debugging)
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


logging.level.com.simpleroster.routegenerator.security.JwtAuthenticationFilter=DEBUG
logging.level.com.simpleroster.routegenerator.service.ScheduleService=DEBUG

spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=20MB

# JWT Configuration
jwt.secret=your-very-secure-and-long-secret-key-here-change-this
jwt.expiration.ms=36000000

# Set traces_sample_rate to 1.0 to capture 100%
# of transactions for performance monitoring.
# We recommend adjusting this value in production.
#sentry.traces-sample-rate=1.0
#sentry.dsn=https://d4b623cc54d5f968fba647eed1407802@o4509109277753344.ingest.de.sentry.io/4509109279653968
# Add data like request headers and IP for users,
# see https://docs.sentry.io/platforms/java/guides/spring-boot/data-management/data-collected/ for more info
#sentry.send-default-pii=true